"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ElemenUtils_1 = __importDefault(require("../../utils/ElemenUtils"));
const log4js_1 = __importDefault(require("log4js"));
const StringUtils_1 = require("../../utils/StringUtils");
class default_1 {
    constructor(login) {
        this.login = login;
        this.connection = login.getConnnection();
        this.logger = log4js_1.default.getLogger(StringUtils_1.substringAfter(__filename, 'huawei-wingle-4g'));
    }
    activeLog(activeLog) {
        this.logger.level = activeLog ? 'debug' : 'OFF';
        this.login.activeLog(activeLog);
    }
    getBlacklistedWlanClients() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connection.openHomePage();
            yield this.login.login();
            const response = yield this.connection.get('/api/wlan/multi-macfilter-settings');
            const document = response.document;
            const blacklistedWlanClients = [];
            const ssidElements = document.querySelectorAll('Ssids > Ssid');
            if (ssidElements && ssidElements.length) {
                ssidElements.forEach(ssidElement => {
                    let hostName;
                    try {
                        hostName = ElemenUtils_1.default(ssidElement, 'wifihostname0', 'Host name blacklisted client', this.logger);
                    }
                    catch (err) {
                        return;
                    }
                    const id = ElemenUtils_1.default(ssidElement, 'Index', 'ID blacklisted client', this.logger);
                    const macAddress = ElemenUtils_1.default(ssidElement, 'WifiMacFilterMac0', 'Mac address blacklisted client', this.logger);
                    blacklistedWlanClients.push({ id, ipAddress: '', hostName, macAddress, duration: 0 });
                });
            }
            return blacklistedWlanClients;
        });
    }
}
exports.default = default_1;
//# sourceMappingURL=BlacklistedWlanClientsExtractor.js.map