"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Statistics = void 0;
const StatisticsExtractor_1 = __importDefault(require("./StatisticsExtractor"));
const WlanClientsExtractor_1 = __importDefault(require("./WlanClientsExtractor"));
const BlacklistedWlanClientsExtractor_1 = __importDefault(require("./BlacklistedWlanClientsExtractor"));
const HistoryCleaner_1 = __importDefault(require("./HistoryCleaner"));
const DataPlanning_1 = __importDefault(require("./DataPlanning"));
class Statistics {
    constructor(login) {
        this.statisticsExtractor = new StatisticsExtractor_1.default(login);
        this.wlanClientsExtractor = new WlanClientsExtractor_1.default(login);
        this.blacklistedWlanClientsExtractor = new BlacklistedWlanClientsExtractor_1.default(login);
        this.historyCleaner = new HistoryCleaner_1.default(login);
        this.dataPlanning = new DataPlanning_1.default(login);
    }
    activeLog(activeLog) {
        this.statisticsExtractor.activeLog(activeLog);
        this.wlanClientsExtractor.activeLog(activeLog);
        this.blacklistedWlanClientsExtractor.activeLog(activeLog);
        this.historyCleaner.activeLog(activeLog);
        this.dataPlanning.activeLog(activeLog);
    }
    getStatistics() {
        return this.statisticsExtractor.getStatistics();
    }
    updateDataPlan(dataPlan) {
        return this.dataPlanning.updateDataPlan(dataPlan);
    }
    clearHistory() {
        return this.historyCleaner.clearHistory();
    }
    getConnectedWlanClients() {
        return this.wlanClientsExtractor.getWlanClients();
    }
    getBlacklistedWlanClients() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.blacklistedWlanClientsExtractor.getBlacklistedWlanClients();
        });
    }
}
exports.Statistics = Statistics;
//# sourceMappingURL=Statistics.js.map