"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ussd = void 0;
const Connection_1 = __importDefault(require("../../connection/Connection"));
const log4js_1 = __importDefault(require("log4js"));
const StringUtils_1 = require("../../utils/StringUtils");
const SLEEP_DURATION = 5000;
const MAX_TRY_RETRIEVING_REMOTE_RESPONSE = 100;
class Ussd {
    constructor(login) {
        this.login = login;
        this.connection = login.getConnnection();
        this.logger = log4js_1.default.getLogger(StringUtils_1.substringAfter(__filename, 'huawei-wingle-4g'));
    }
    activeLog(activeLog) {
        this.logger.level = activeLog ? 'debug' : 'OFF';
        this.login.activeLog(activeLog);
    }
    sendUssd(ussd) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!ussd) {
                throw new Error('USSD is blank');
            }
            yield this.connection.openHomePage();
            yield this.login.login();
            return this.reply(ussd);
        });
    }
    reply(response) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!response) {
                throw new Error('Response for reply is blank');
            }
            const paramaters = `<?xml version: "1.0" encoding="UTF-8"?><request><content>${response}</content><codeType>CodeType</codeType><timeout></timeout></request>`;
            const result = yield this.connection.post('/api/ussd/send', paramaters);
            if (!Connection_1.default.isSuccess(result)) {
                throw new Error('Unable to send USSD');
            }
            return this.retrieveResponseFromRemote();
        });
    }
    retrieveResponseFromRemote() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            for (let i = 0; i < MAX_TRY_RETRIEVING_REMOTE_RESPONSE; i++) {
                this.logger.debug(`Attempt to retrieve response from remote wity retry : ${i}`);
                const response = yield this.connection.get('/api/ussd/get');
                const document = response.document;
                const code = (_a = document.querySelector('code')) === null || _a === void 0 ? void 0 : _a.textContent;
                if (code && code !== '111019') {
                    throw new Error(`Unable to interpret code sent by remote : ${code}`);
                }
                const contentElement = document.querySelector('content');
                if (contentElement) {
                    const content = contentElement.textContent ? contentElement.textContent : '';
                    this.logger.debug(`USSD response : ${content}`);
                    return content;
                }
                yield this.sleep();
            }
            throw new Error(`Attempting to retrieve response from remote reached max authorized retries : ${MAX_TRY_RETRIEVING_REMOTE_RESPONSE}`);
        });
    }
    sleep() {
        return new Promise(resolve => setTimeout(() => resolve(), SLEEP_DURATION));
    }
}
exports.Ussd = Ussd;
;
//# sourceMappingURL=Ussd.js.map