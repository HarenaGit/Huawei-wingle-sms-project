"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sms = void 0;
const Sms_1 = require("../../model/sms/Sms");
const log4js_1 = __importDefault(require("log4js"));
const StringUtils_1 = require("../../utils/StringUtils");
const SummaryExtractor_1 = __importDefault(require("./SummaryExtractor"));
const InboxSmsExtractor_1 = __importDefault(require("./InboxSmsExtractor"));
const SmsAsRead_1 = __importDefault(require("./SmsAsRead"));
const SmsRemover_1 = __importDefault(require("./SmsRemover"));
const SmsInDraft_1 = __importDefault(require("./SmsInDraft"));
const SmsSender_1 = __importDefault(require("./SmsSender"));
class Sms {
    constructor(login) {
        this.login = login;
        this.logger = log4js_1.default.getLogger(StringUtils_1.substringAfter(__filename, 'huawei-wingle-4g'));
        this.summaryExtractor = new SummaryExtractor_1.default(login);
        this.inboxSmsExtractor = new InboxSmsExtractor_1.default(login, this.summaryExtractor);
        this.smsAsRead = new SmsAsRead_1.default(login);
        this.smsRemover = new SmsRemover_1.default(login);
        this.smsInDraft = new SmsInDraft_1.default(login);
        this.smsSender = new SmsSender_1.default(login);
    }
    activeLog(activeLog) {
        this.logger.level = activeLog ? 'debug' : 'OFF';
        this.login.activeLog(activeLog);
        this.summaryExtractor.activeLog(activeLog);
        this.inboxSmsExtractor.activeLog(activeLog);
        this.smsAsRead.activeLog(activeLog);
        this.smsRemover.activeLog(activeLog);
        this.smsSender.activeLog(activeLog);
    }
    getSummary() {
        return this.summaryExtractor.getSummary();
    }
    getInboxSmsList() {
        return this.inboxSmsExtractor.getSmsList(Sms_1.Type.INBOX);
    }
    getOutboxSmsList() {
        return this.inboxSmsExtractor.getSmsList(Sms_1.Type.OUTBOX);
    }
    getDraftSmsList() {
        return this.inboxSmsExtractor.getSmsList(Sms_1.Type.DRAFT);
    }
    setSmsAsRead(smsId) {
        return this.smsAsRead.setSmsAsRead(smsId);
    }
    sendSms(phoneNumbers, content) {
        return this.smsSender.sendSms(phoneNumbers, content);
    }
    saveSmsInDraft(phoneNumbers, content) {
        return this.smsInDraft.saveSmsInDraft(phoneNumbers, content);
    }
    removeSms(smsIds) {
        return this.smsRemover.removeSms(smsIds);
    }
}
exports.Sms = Sms;
//# sourceMappingURL=Sms.js.map